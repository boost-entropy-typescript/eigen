diff --git a/cocoapods-patch-20230922-45773-1fk3wiq/Nimble-Snapshots/DynamicSize/DynamicSizeSnapshot.swift b/Pods/Nimble-Snapshots/DynamicSize/DynamicSizeSnapshot.swift
index bb10258e1f..9363f2026d 100644
--- a/cocoapods-patch-20230922-45773-1fk3wiq/Nimble-Snapshots/DynamicSize/DynamicSizeSnapshot.swift
+++ b/Pods/Nimble-Snapshots/DynamicSize/DynamicSizeSnapshot.swift
@@ -138,8 +138,8 @@ public func snapshot(_ name: String? = nil, sizes: [String: CGSize],
 public func haveValidDynamicSizeSnapshot(named name: String? = nil, sizes: [String: CGSize],
                                          isDeviceAgnostic: Bool = false, usesDrawRect: Bool = false,
                                          tolerance: CGFloat? = nil,
-                                         resizeMode: ResizeMode = .frame) -> Predicate<Snapshotable> {
-    return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+                                         resizeMode: ResizeMode = .frame) -> Nimble.Predicate<Snapshotable> {
+    return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
         return performDynamicSizeSnapshotTest(name, sizes: sizes, isDeviceAgnostic: isDeviceAgnostic,
                                               usesDrawRect: usesDrawRect, actualExpression: actualExpression,
                                               failureMessage: failureMessage, tolerance: tolerance,
@@ -200,8 +200,8 @@ public func recordSnapshot(_ name: String? = nil, sizes: [String: CGSize],
 
 public func recordDynamicSizeSnapshot(named name: String? = nil, sizes: [String: CGSize],
                                       isDeviceAgnostic: Bool = false, usesDrawRect: Bool = false,
-                                      resizeMode: ResizeMode = .frame) -> Predicate<Snapshotable> {
-    return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+                                      resizeMode: ResizeMode = .frame) -> Nimble.Predicate<Snapshotable> {
+    return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
         return performDynamicSizeSnapshotTest(name, sizes: sizes, isDeviceAgnostic: isDeviceAgnostic,
                                               usesDrawRect: usesDrawRect, actualExpression: actualExpression,
                                               failureMessage: failureMessage, isRecord: true, resizeMode: resizeMode)
diff --git a/cocoapods-patch-20230922-45773-1fk3wiq/Nimble-Snapshots/DynamicType/HaveValidDynamicTypeSnapshot.swift b/Pods/Nimble-Snapshots/DynamicType/HaveValidDynamicTypeSnapshot.swift
index 5ffcb4ff5d..9b44909b87 100644
--- a/cocoapods-patch-20230922-45773-1fk3wiq/Nimble-Snapshots/DynamicType/HaveValidDynamicTypeSnapshot.swift
+++ b/Pods/Nimble-Snapshots/DynamicType/HaveValidDynamicTypeSnapshot.swift
@@ -15,9 +15,9 @@ func shortCategoryName(_ category: UIContentSizeCategory) -> String {
     return category.rawValue.replacingOccurrences(of: "UICTContentSizeCategory", with: "")
 }
 
-func combinePredicates<T>(_ predicates: [Predicate<T>], ignoreFailures: Bool = false,
-                          deferred: (() -> Void)? = nil) -> Predicate<T> {
-    return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+func combinePredicates<T>(_ predicates: [Nimble.Predicate<T>], ignoreFailures: Bool = false,
+                          deferred: (() -> Void)? = nil) -> Nimble.Predicate<T> {
+    return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
         defer {
             deferred?()
         }
@@ -36,18 +36,18 @@ func combinePredicates<T>(_ predicates: [Predicate<T>], ignoreFailures: Bool = f
 public func haveValidDynamicTypeSnapshot(named name: String? = nil, usesDrawRect: Bool = false,
                                          tolerance: CGFloat? = nil,
                                          sizes: [UIContentSizeCategory] = allContentSizeCategories(),
-                                         isDeviceAgnostic: Bool = false) -> Predicate<Snapshotable> {
+                                         isDeviceAgnostic: Bool = false) -> Nimble.Predicate<Snapshotable> {
     let mock = NBSMockedApplication()
 
-    let predicates: [Predicate<Snapshotable>] = sizes.map { category in
+    let predicates: [Nimble.Predicate<Snapshotable>] = sizes.map { category in
         let sanitizedName = sanitizedTestName(name)
         let nameWithCategory = "\(sanitizedName)_\(shortCategoryName(category))"
 
-        return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+        return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
             mock.mockPreferredContentSizeCategory(category)
             updateTraitCollection(on: actualExpression)
 
-            let predicate: Predicate<Snapshotable>
+            let predicate: Nimble.Predicate<Snapshotable>
             if isDeviceAgnostic {
                 predicate = haveValidDeviceAgnosticSnapshot(named: nameWithCategory,
                                                           usesDrawRect: usesDrawRect, tolerance: tolerance)
@@ -66,18 +66,18 @@ public func haveValidDynamicTypeSnapshot(named name: String? = nil, usesDrawRect
 
 public func recordDynamicTypeSnapshot(named name: String? = nil, usesDrawRect: Bool = false,
                                       sizes: [UIContentSizeCategory] = allContentSizeCategories(),
-                                      isDeviceAgnostic: Bool = false) -> Predicate<Snapshotable> {
+                                      isDeviceAgnostic: Bool = false) -> Nimble.Predicate<Snapshotable> {
     let mock = NBSMockedApplication()
 
-    let predicates: [Predicate<Snapshotable>] = sizes.map { category in
+    let predicates: [Nimble.Predicate<Snapshotable>] = sizes.map { category in
         let sanitizedName = sanitizedTestName(name)
         let nameWithCategory = "\(sanitizedName)_\(shortCategoryName(category))"
 
-        return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+        return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
             mock.mockPreferredContentSizeCategory(category)
             updateTraitCollection(on: actualExpression)
 
-            let predicate: Predicate<Snapshotable>
+            let predicate: Nimble.Predicate<Snapshotable>
             if isDeviceAgnostic {
                 predicate = recordDeviceAgnosticSnapshot(named: nameWithCategory, usesDrawRect: usesDrawRect)
             } else {
diff --git a/cocoapods-patch-20230922-45773-1fk3wiq/Nimble-Snapshots/HaveValidSnapshot.swift b/Pods/Nimble-Snapshots/HaveValidSnapshot.swift
index 6671305017..d5f66aed56 100644
--- a/cocoapods-patch-20230922-45773-1fk3wiq/Nimble-Snapshots/HaveValidSnapshot.swift
+++ b/Pods/Nimble-Snapshots/HaveValidSnapshot.swift
@@ -193,9 +193,9 @@ private func currentTestName() -> String? {
 internal var switchChecksWithRecords = false
 
 public func haveValidSnapshot(named name: String? = nil, usesDrawRect: Bool = false,
-                              tolerance: CGFloat? = nil) -> Predicate<Snapshotable> {
+                              tolerance: CGFloat? = nil) -> Nimble.Predicate<Snapshotable> {
 
-    return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+    return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
         if switchChecksWithRecords {
             return recordSnapshot(name, usesDrawRect: usesDrawRect, actualExpression: actualExpression,
                                   failureMessage: failureMessage)
@@ -207,9 +207,9 @@ public func haveValidSnapshot(named name: String? = nil, usesDrawRect: Bool = fa
 }
 
 public func haveValidDeviceAgnosticSnapshot(named name: String? = nil, usesDrawRect: Bool = false,
-                                            tolerance: CGFloat? = nil) -> Predicate<Snapshotable> {
+                                            tolerance: CGFloat? = nil) -> Nimble.Predicate<Snapshotable> {
 
-    return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+    return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
         if switchChecksWithRecords {
             return recordSnapshot(name, isDeviceAgnostic: true, usesDrawRect: usesDrawRect,
                                   actualExpression: actualExpression, failureMessage: failureMessage)
@@ -221,18 +221,18 @@ public func haveValidDeviceAgnosticSnapshot(named name: String? = nil, usesDrawR
     }
 }
 
-public func recordSnapshot(named name: String? = nil, usesDrawRect: Bool = false) -> Predicate<Snapshotable> {
+public func recordSnapshot(named name: String? = nil, usesDrawRect: Bool = false) -> Nimble.Predicate<Snapshotable> {
 
-    return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+    return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
         return recordSnapshot(name, usesDrawRect: usesDrawRect,
                               actualExpression: actualExpression, failureMessage: failureMessage)
     }
 }
 
 public func recordDeviceAgnosticSnapshot(named name: String? = nil,
-                                         usesDrawRect: Bool = false) -> Predicate<Snapshotable> {
+                                         usesDrawRect: Bool = false) -> Nimble.Predicate<Snapshotable> {
 
-    return Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
+    return Nimble.Predicate.fromDeprecatedClosure { actualExpression, failureMessage in
         return recordSnapshot(name, isDeviceAgnostic: true, usesDrawRect: usesDrawRect,
                               actualExpression: actualExpression, failureMessage: failureMessage)
     }
diff --git a/cocoapods-patch-20230922-45773-1fk3wiq/Nimble-Snapshots/XCTestObservationCenter+CurrentTestCaseTracker.m b/Pods/Nimble-Snapshots/XCTestObservationCenter+CurrentTestCaseTracker.m
index 4a4e2ccc33..adbb9df57d 100644
--- a/cocoapods-patch-20230922-45773-1fk3wiq/Nimble-Snapshots/XCTestObservationCenter+CurrentTestCaseTracker.m
+++ b/Pods/Nimble-Snapshots/XCTestObservationCenter+CurrentTestCaseTracker.m
@@ -1,5 +1,5 @@
 #import "XCTestObservationCenter+CurrentTestCaseTracker.h"
-#import "Nimble_Snapshots/Nimble_Snapshots-Swift.h"
+#import "Nimble_Snapshots-Swift.h"
 
 @implementation XCTestObservationCenter (CurrentTestCaseTracker)
 
