diff --git a/node_modules/react-native-credit-card-input/src/CCInput.js b/node_modules/react-native-credit-card-input/src/CCInput.js
index dde3aec..4770ce8 100644
--- a/node_modules/react-native-credit-card-input/src/CCInput.js
+++ b/node_modules/react-native-credit-card-input/src/CCInput.js
@@ -8,6 +8,7 @@ import {
   StyleSheet,
   ViewPropTypes,
 } from "react-native";
+import { TextPropTypes } from "deprecated-react-native-prop-types"
 
 const s = StyleSheet.create({
   baseInputStyle: {
@@ -26,13 +27,14 @@ export default class CCInput extends Component {
     status: PropTypes.oneOf(["valid", "invalid", "incomplete"]),
 
     containerStyle: ViewPropTypes.style,
-    inputStyle: Text.propTypes.style,
-    labelStyle: Text.propTypes.style,
+    inputStyle: TextPropTypes.style,
+    labelStyle: TextPropTypes.style,
     validColor: PropTypes.string,
     invalidColor: PropTypes.string,
     placeholderColor: PropTypes.string,
 
     onFocus: PropTypes.func,
+    onBlur: PropTypes.func,
     onChange: PropTypes.func,
     onBecomeEmpty: PropTypes.func,
     onBecomeValid: PropTypes.func,
@@ -47,6 +49,7 @@ export default class CCInput extends Component {
     inputStyle: {},
     labelStyle: {},
     onFocus: () => {},
+    onBlur: () => {},
     onChange: () => {},
     onBecomeEmpty: () => {},
     onBecomeValid: () => {},
@@ -70,6 +73,7 @@ export default class CCInput extends Component {
     const { label, value, placeholder, status, keyboardType,
             containerStyle, inputStyle, labelStyle,
             validColor, invalidColor, placeholderColor,
+            onBlur,
             additionalInputProps } = this.props;
     return (
       <TouchableOpacity onPress={this.focus}
@@ -81,6 +85,7 @@ export default class CCInput extends Component {
             keyboardType={keyboardType}
             autoCapitalise="words"
             autoCorrect={false}
+            onBlur={onBlur}
             style={[
               s.baseInputStyle,
               inputStyle,
diff --git a/node_modules/react-native-credit-card-input/src/CreditCardInput.js b/node_modules/react-native-credit-card-input/src/CreditCardInput.js
index 44f43c8..c164ce9 100644
--- a/node_modules/react-native-credit-card-input/src/CreditCardInput.js
+++ b/node_modules/react-native-credit-card-input/src/CreditCardInput.js
@@ -10,6 +10,7 @@ import ReactNative, {
   TextInput,
   ViewPropTypes,
 } from "react-native";
+import { TextPropTypes } from "deprecated-react-native-prop-types"
 
 import CreditCard from "./CardView";
 import CCInput from "./CCInput";
@@ -48,8 +49,8 @@ export default class CreditCardInput extends Component {
     labels: PropTypes.object,
     placeholders: PropTypes.object,
 
-    labelStyle: Text.propTypes.style,
-    inputStyle: Text.propTypes.style,
+    labelStyle: TextPropTypes.style,
+    inputStyle: TextPropTypes.style,
     inputContainerStyle: ViewPropTypes.style,
 
     validColor: PropTypes.string,
@@ -65,7 +66,7 @@ export default class CreditCardInput extends Component {
     allowScroll: PropTypes.bool,
 
     additionalInputsProps: PropTypes.objectOf(PropTypes.shape(TextInput.propTypes)),
-  };
+  }
 
   static defaultProps = {
     cardViewSize: {},
@@ -92,64 +93,93 @@ export default class CreditCardInput extends Component {
     placeholderColor: "gray",
     allowScroll: false,
     additionalInputsProps: {},
-  };
-
-  componentDidMount = () => this._focus(this.props.focused);
-
-  componentWillReceiveProps = newProps => {
-    if (this.props.focused !== newProps.focused) this._focus(newProps.focused);
-  };
+  }
 
-  _focus = field => {
-    if (!field) return;
+  componentDidMount = () => this._focus(this.props.focused)
 
-    const scrollResponder = this.refs.Form.getScrollResponder();
-    const nodeHandle = ReactNative.findNodeHandle(this.refs[field]);
+  componentWillReceiveProps = (newProps) => {
+    if (this.props.focused !== newProps.focused) this._focus(newProps.focused)
+  }
 
-    NativeModules.UIManager.measureLayoutRelativeToParent(nodeHandle,
-      e => { throw e; },
-      x => {
-        scrollResponder.scrollTo({ x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0), animated: true });
-        this.refs[field].focus();
-      });
+  _focus = (field) => {
+    if (!field) return
+
+    const scrollResponder = this.refs.Form.getScrollResponder()
+    const nodeHandle = ReactNative.findNodeHandle(this.refs[field])
+
+    NativeModules.UIManager.measureLayoutRelativeToParent(
+      nodeHandle,
+      (e) => {
+        throw e
+      },
+      (x) => {
+        scrollResponder.scrollTo({ x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0), animated: true })
+        this.refs[field].focus()
+      }
+    )
   }
 
-  _inputProps = field => {
+  _inputProps = (field) => {
     const {
-      inputStyle, labelStyle, validColor, invalidColor, placeholderColor,
-      placeholders, labels, values, status,
-      onFocus, onChange, onBecomeEmpty, onBecomeValid,
+      inputStyle,
+      labelStyle,
+      validColor,
+      invalidColor,
+      placeholderColor,
+      placeholders,
+      labels,
+      values,
+      status,
+      onFocus,
+      onChange,
+      onBecomeEmpty,
+      onBecomeValid,
       additionalInputsProps,
-    } = this.props;
+    } = this.props
 
     return {
       inputStyle: [s.input, inputStyle],
       labelStyle: [s.inputLabel, labelStyle],
-      validColor, invalidColor, placeholderColor,
-      ref: field, field,
+      validColor,
+      invalidColor,
+      placeholderColor,
+      ref: field,
+      field,
 
       label: labels[field],
       placeholder: placeholders[field],
       value: values[field],
       status: status[field],
 
-      onFocus, onChange, onBecomeEmpty, onBecomeValid,
+      onFocus,
+      onChange,
+      onBecomeEmpty,
+      onBecomeValid,
 
       additionalInputProps: additionalInputsProps[field],
-    };
-  };
+    }
+  }
 
   render() {
     const {
-      cardImageFront, cardImageBack, inputContainerStyle,
-      values: { number, expiry, cvc, name, type }, focused,
-      allowScroll, requiresName, requiresCVC, requiresPostalCode,
-      cardScale, cardFontFamily, cardBrandIcons,
-    } = this.props;
+      cardImageFront,
+      cardImageBack,
+      inputContainerStyle,
+      values: { number, expiry, cvc, name, type },
+      focused,
+      allowScroll,
+      requiresName,
+      requiresCVC,
+      requiresPostalCode,
+      cardScale,
+      cardFontFamily,
+      cardBrandIcons,
+    } = this.props
 
     return (
       <View style={s.container}>
-        <CreditCard focused={focused}
+        <CreditCard
+          focused={focused}
           brand={type}
           scale={cardScale}
           fontFamily={cardFontFamily}
@@ -159,32 +189,56 @@ export default class CreditCardInput extends Component {
           name={requiresName ? name : " "}
           number={number}
           expiry={expiry}
-          cvc={cvc} />
-        <ScrollView ref="Form"
+          cvc={cvc}
+        />
+        <ScrollView
+          ref="Form"
           horizontal
           keyboardShouldPersistTaps="always"
           scrollEnabled={allowScroll}
           showsHorizontalScrollIndicator={false}
-          style={s.form}>
-          <CCInput {...this._inputProps("number")}
+          style={s.form}
+        >
+          <CCInput
+            {...this._inputProps("number")}
             keyboardType="numeric"
-            containerStyle={[s.inputContainer, inputContainerStyle, { width: CARD_NUMBER_INPUT_WIDTH }]} />
-          <CCInput {...this._inputProps("expiry")}
+            containerStyle={[
+              s.inputContainer,
+              inputContainerStyle,
+              { width: CARD_NUMBER_INPUT_WIDTH },
+            ]}
+          />
+          <CCInput
+            {...this._inputProps("expiry")}
             keyboardType="numeric"
-            containerStyle={[s.inputContainer, inputContainerStyle, { width: EXPIRY_INPUT_WIDTH }]} />
-          { requiresCVC &&
-            <CCInput {...this._inputProps("cvc")}
+            containerStyle={[s.inputContainer, inputContainerStyle, { width: EXPIRY_INPUT_WIDTH }]}
+          />
+          {requiresCVC && (
+            <CCInput
+              {...this._inputProps("cvc")}
               keyboardType="numeric"
-              containerStyle={[s.inputContainer, inputContainerStyle, { width: CVC_INPUT_WIDTH }]} /> }
-          { requiresName &&
-            <CCInput {...this._inputProps("name")}
-              containerStyle={[s.inputContainer, inputContainerStyle, { width: NAME_INPUT_WIDTH }]} /> }
-          { requiresPostalCode &&
-            <CCInput {...this._inputProps("postalCode")}
+              containerStyle={[s.inputContainer, inputContainerStyle, { width: CVC_INPUT_WIDTH }]}
+            />
+          )}
+          {requiresName && (
+            <CCInput
+              {...this._inputProps("name")}
+              containerStyle={[s.inputContainer, inputContainerStyle, { width: NAME_INPUT_WIDTH }]}
+            />
+          )}
+          {requiresPostalCode && (
+            <CCInput
+              {...this._inputProps("postalCode")}
               keyboardType="numeric"
-              containerStyle={[s.inputContainer, inputContainerStyle, { width: POSTAL_CODE_INPUT_WIDTH }]} /> }
+              containerStyle={[
+                s.inputContainer,
+                inputContainerStyle,
+                { width: POSTAL_CODE_INPUT_WIDTH },
+              ]}
+            />
+          )}
         </ScrollView>
       </View>
-    );
+    )
   }
 }
diff --git a/node_modules/react-native-credit-card-input/src/LiteCreditCardInput.js b/node_modules/react-native-credit-card-input/src/LiteCreditCardInput.js
index a5f166b..1ff7c02 100644
--- a/node_modules/react-native-credit-card-input/src/LiteCreditCardInput.js
+++ b/node_modules/react-native-credit-card-input/src/LiteCreditCardInput.js
@@ -5,10 +5,10 @@ import {
   Text,
   StyleSheet,
   Image,
-  LayoutAnimation,
   TouchableOpacity,
   TextInput,
 } from "react-native";
+import { TextPropTypes } from "deprecated-react-native-prop-types"
 
 import Icons from "./Icons";
 import CCInput from "./CCInput";
@@ -20,13 +20,14 @@ const s = StyleSheet.create({
   container: {
     paddingLeft: 10,
     paddingRight: 10,
+    height: 50,
     flexDirection: "row",
     alignItems: "center",
     overflow: "hidden",
   },
   icon: {
-    width: 48,
-    height: 40,
+    width: 32,
+    height: 26,
     resizeMode: "contain",
   },
   expanded: {
@@ -50,18 +51,22 @@ const s = StyleSheet.create({
     width: INFINITE_WIDTH,
   },
   expiryInput: {
-    width: 80,
+    width: "100%",
+    marginRight: 5,
   },
   cvcInput: {
-    width: 80,
+    width: "100%",
+    marginRight: 3, // fix truncated text for custom font
   },
   last4Input: {
     width: 60,
-    marginLeft: 20,
+    marginLeft: 5,
   },
   input: {
-    height: 40,
+    height: 50,
     color: "black",
+    fontSize: 16,
+    fontFamily: "Unica77LL-Regular"
   },
 });
 
@@ -72,7 +77,7 @@ export default class LiteCreditCardInput extends Component {
 
     placeholders: PropTypes.object,
 
-    inputStyle: Text.propTypes.style,
+    inputStyle: TextPropTypes.style,
 
     validColor: PropTypes.string,
     invalidColor: PropTypes.string,
@@ -83,13 +88,13 @@ export default class LiteCreditCardInput extends Component {
 
   static defaultProps = {
     placeholders: {
-      number: "1234 5678 1234 5678",
+      number: "Card number",
       expiry: "MM/YY",
       cvc: "CVC",
     },
     validColor: "",
     invalidColor: "red",
-    placeholderColor: "gray",
+    placeholderColor: "#707070", // black60
     additionalInputsProps: {},
   };
 
@@ -105,7 +110,6 @@ export default class LiteCreditCardInput extends Component {
   _focus = field => {
     if (!field) return;
     this.refs[field].focus();
-    LayoutAnimation.easeInEaseOut();
   }
 
   _inputProps = field => {
@@ -113,6 +117,7 @@ export default class LiteCreditCardInput extends Component {
       inputStyle, validColor, invalidColor, placeholderColor,
       placeholders, values, status,
       onFocus, onChange, onBecomeEmpty, onBecomeValid,
+      onBlur,
       additionalInputsProps,
     } = this.props;
 
@@ -126,6 +131,7 @@ export default class LiteCreditCardInput extends Component {
       status: status[field],
 
       onFocus, onChange, onBecomeEmpty, onBecomeValid,
+      onBlur,
       additionalInputProps: additionalInputsProps[field],
     };
   };
@@ -139,11 +145,22 @@ export default class LiteCreditCardInput extends Component {
   }
 
   render() {
-    const { focused, values: { number }, inputStyle, status: { number: numberStatus } } = this.props;
+    const { focused, isInputFocused, valid, values: { number }, inputStyle, status: { number: numberStatus } } = this.props;
     const showRightPart = focused && focused !== "number";
 
+    const borderColor = "#C2C2C2" // black30
+    const borderColorFocused = "#707070" // black60
+    const borderColorError = "#C82400" // red100
+
+    const showWarningState = !isInputFocused && !valid && number?.length
+
+    const borderStyle = {
+      borderWidth: 1,
+      borderColor: showWarningState ? borderColorError : isInputFocused ? borderColorFocused : borderColor
+    }
+
     return (
-      <View style={s.container}>
+      <View style={[s.container, borderStyle]}>
         <View style={[
           s.leftPart,
           showRightPart ? s.hidden : s.expanded,
@@ -152,16 +169,23 @@ export default class LiteCreditCardInput extends Component {
             keyboardType="numeric"
             containerStyle={s.numberInput} />
         </View>
-        <TouchableOpacity onPress={showRightPart ? this._focusNumber : this._focusExpiry }>
-          <Image style={s.icon} source={Icons[this._iconToShow()]} />
-        </TouchableOpacity>
+          <View>
+            <TouchableOpacity onPress={showRightPart ? this._focusNumber : this._focusExpiry }>
+              <Image style={s.icon} source={Icons[this._iconToShow()]} />
+            </TouchableOpacity>
+          </View>
+
         <View style={[
           s.rightPart,
           showRightPart ? s.expanded : s.hidden,
         ]}>
           <TouchableOpacity onPress={this._focusNumber}
             style={s.last4}>
-            <View pointerEvents={"none"}>
+            <View
+              pointerEvents={"none"}
+              style={{flexDirection: 'row', alignItems: 'center', paddingStart: 15}}
+            >
+              <Text>••••</Text>
               <CCInput field="last4"
                 keyboardType="numeric"
                 value={ numberStatus === "valid" ? number.substr(number.length - 4, 4) : "" }
diff --git a/node_modules/react-native-credit-card-input/src/connectToState.js b/node_modules/react-native-credit-card-input/src/connectToState.js
index cda7fc6..d12a1de 100644
--- a/node_modules/react-native-credit-card-input/src/connectToState.js
+++ b/node_modules/react-native-credit-card-input/src/connectToState.js
@@ -6,6 +6,7 @@ import compact from "lodash.compact";
 
 export const InjectedProps = {
   focused: PropTypes.string,
+  isInputFocused: PropTypes.bool,
   values: PropTypes.object.isRequired,
   status: PropTypes.object.isRequired,
   onFocus: PropTypes.func.isRequired,
@@ -47,6 +48,7 @@ export default function connectToState(CreditCardInput) {
       super();
       this.state = {
         focused: "",
+        isInputFocused: false,
         values: {},
         status: {},
       };
@@ -68,7 +70,7 @@ export default function connectToState(CreditCardInput) {
     };
 
     focus = (field = "number") => {
-      this.setState({ focused: field });
+      this.setState({ focused: field, isInputFocused: true });
     };
 
     _displayedFields = () => {
@@ -115,6 +117,7 @@ export default function connectToState(CreditCardInput) {
           {...this.props}
           {...this.state}
           onFocus={this._onFocus}
+          onBlur={() => this.setState({isInputFocused: false})}
           onChange={this._change}
           onBecomeEmpty={this._focusPreviousField}
           onBecomeValid={this._focusNextField} />
